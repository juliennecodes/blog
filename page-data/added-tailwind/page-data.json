{"componentChunkName":"component---src-templates-blog-post-js","path":"/added-tailwind/","result":{"data":{"site":{"siteMetadata":{"title":"julienneblogs"}},"markdownRemark":{"id":"7358a37e-5f27-563f-b988-5ae687705ed3","excerpt":"I started a new project, Colour Converter, in large part to learn how to use Tailwind. I initially thought the hard part would be learning the Tailwind…","html":"<p>I started a new project, <a href=\"https://juliennecodes.github.io/colour-converter\">Colour Converter</a>, in large part to learn how to use Tailwind. I initially thought the hard part would be learning the Tailwind vocabulary. After reading about it and thinking I knew enough to get started, I discovered that the hard part was actually installing Tailwind.</p>\n<p>I watched a video on Tailwind to familiarize myself with how to use it. However, I wasn’t sure if that was the proper way of doing things so I started reading the documentation. What ensued was me reading about PostCSS as if it was a common knowledge thing. I didn’t know what PostCSS was so it was really hard trying to figure out whether my errors were caused by the lack of knowledge in that area.</p>\n<p>I watched this very <a href=\"https://www.youtube.com/watch?v=qYgogv4R8zg\">helpful video by TailwindLabs</a>, which explained what PostCSS is. From what I’ve learned, PostCSS takes in an input, which is a CSS file and it runs the file through plugins. The plugins transform the input CSS and generate an output CSS.</p>\n<p>So in Tailwind, you have a CSS file with Tailwind directives. I’m guessing through PostCSS, these directives get unpacked and a CSS file gets generated, which has style rules for different classes.</p>\n<p>Anyway, here are the steps in installing Tailwind, with comments.</p>\n<h2>Installing Tailwind Steps</h2>\n<ol>\n<li>\n<p>Install Tailwind, PostCSS, and Autoprefixer as dependencies</p>\n<ul>\n<li>Go to your project directory</li>\n<li>Type command - npm install -D tailwindcss postcss autoprefixer</li>\n</ul>\n</li>\n<li>\n<p>Create config files for Tailwind and PostCSS</p>\n<ul>\n<li>Go to your project directory</li>\n<li>Type command - npx tailwindcss init postcss\n<ul>\n<li>This generates tailwind.config.js, which is the place you go to when you want to customize Tailwind</li>\n<li>This generates postcss.config.js, which gives the instruction to run the input CSS file through tailwindcss first and then autoprefixer</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<p>Add Tailwind directives in your CSS file</p>\n<ul>\n<li>Open src/index.css</li>\n<li>Type <code class=\"language-text\">@tailwind base; @tailwind components; @tailwind utilities;</code> in src/index.css</li>\n</ul>\n</li>\n<li>\n<p>Create a script that builds your output CSS file</p>\n<ul>\n<li>Open package.json</li>\n<li>Create a new script called, “build-css” that has the value of “tailwindcss -i src/index.css -o public/styles/tailwind.css”\n<ul>\n<li><code class=\"language-text\">\"build-css\": \"tailwindcss -i src/index.css -o public/styles/tailwind.css\"</code></li>\n<li>This takes the input CSS (src/index.css) and runs it through a series of PostCSS plugins. Plugins transform the input CSS and generates an output CSS (public/styles/tailwind.css).</li>\n<li>The input CSS has the Tailwind directives (@tailwind base, @tailwind components, @tailwind utilities), which contains reset styles, container styles, and utility classes styles. These styles get unpacked and placed into the output CSS.</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<p>Build the CSS file</p>\n<ul>\n<li>Type command - npm run build-css</li>\n</ul>\n</li>\n</ol>\n<p>Note: To update the output CSS, make changes to input CSS and run the command, npm run build-css, again.</p>\n<p>And that’s it!</p>\n<p>Now you can add classes to elements to style them.</p>","frontmatter":{"title":"I Added Tailwind to a React Project","date":"August 28, 2021","description":null}},"previous":{"fields":{"slug":"/experimenting-with-svg-part-2/"},"frontmatter":{"title":"Experimenting with SVG Part 2"}},"next":null},"pageContext":{"id":"7358a37e-5f27-563f-b988-5ae687705ed3","previousPostId":"7dd9fa68-5bdd-50c7-8925-788bb2b2c6c9","nextPostId":null}},"staticQueryHashes":["2841359383"]}